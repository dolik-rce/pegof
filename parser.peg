%prefix "parser"

%value "ast_node_t *"
%auxil "system_t *"

%header {
#include "system.h"
/*
static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
    fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
*/
}

%source {
#define PCC_GETCHAR(auxil) system__read_source_file(auxil)
#define PCC_MALLOC(auxil, size) system__allocate_memory(auxil, size)
#define PCC_REALLOC(auxil, ptr, size) system__reallocate_memory(auxil, ptr, size)
#define PCC_FREE(auxil, ptr) system__deallocate_memory(auxil, ptr)
}

grammar <- _* l:statement_list _* c:code? EOF
    {
        $$ = l;
        ast_node__append_child($$, c);
    }

statement_list
   <- s:statement _ l:statement_list
    {
        $$ = l;
        $$->range = range__new($0s, $0e);
        ast_node__prepend_child($$, s);
    }
    / s:statement
    {
        $$ = system__create_ast_node_variadic(auxil, AST_NODE_TYPE_GRAMMAR, range__new($0s, $0e));
        ast_node__prepend_child($$, s);
    }

statement
    <- r:rule { $$ = r; }
    / d:directive { $$ = d; }
    / c:comment { $$ = c; }

rule <- <identifier> _ '<-' _ a:alternation
    {
        ast_node_t *name = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_RULE_NAME, range__new($1s, $1e));
        $$ = system__create_ast_node_binary(auxil, AST_NODE_TYPE_RULE, range__new($1s, $1e), name, a);
    }

directive <-
    '%' <"value" / "auxil" / "prefix"> _ s:string
    {
        ast_node_t *name = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_DIRECTIVE_NAME, range__new($1s, $1e));
        $$ = system__create_ast_node_binary(auxil, AST_NODE_TYPE_DIRECTIVE, range__new($0s, $0e), name, s);
    }
    / '%' <"header" / "source" / "common" / "earlyheader" / "earlysource" / "earlycommon"> _ s:source
    {
        ast_node_t *name = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_DIRECTIVE_NAME, range__new($2s, $2e));
        $$ = system__create_ast_node_binary(auxil, AST_NODE_TYPE_DIRECTIVE, range__new($0s, $0e), name, s);
    }

code <- '%%' [ \t\r\n]* <.*> { $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_CODE, range__new($1s, $1e)); }

alternation
    <- s:sequence _* "/" _* a:alternation
    {
        $$ = a;
        $$->range = range__new($0s, $0e);
        ast_node__prepend_child($$, s);
    }
    / s:sequence
    {
        $$ = system__create_ast_node_variadic(auxil, AST_NODE_TYPE_ALTERNATION, range__new($0s, $0e));
        ast_node__prepend_child($$, s);
    }

sequence
    <- p:primary _* s:sequence
    {
        $$ = s;
        $$->range = range__new($0s, $0e);
        ast_node__prepend_child($$, p);
    }
    / p:primary
    {
        $$ = system__create_ast_node_variadic(auxil, AST_NODE_TYPE_SEQUENCE, range__new($0s, $0e));
        ast_node__prepend_child($$, p);
    }

primary <- ( <pr:prefixOp?> l:literal <po:postfixOp?> (_* <s:source>)? )
    {
        $$ = system__create_ast_node_variadic(auxil, AST_NODE_TYPE_PRIMARY, range__new($0s, $0e));
        if ($1s != $1e) ast_node__append_child($$, pr);
        ast_node__append_child($$, l);
        if ($2s != $2e) ast_node__append_child($$, po);
        if ($3s != $3e) ast_node__append_child($$, s);
    }

literal
    <- r:ruleref { $$ = r; }
    / s:string { $$ = s; }
    / cc:charClass { $$ = cc; }
    / c:comment { $$ = c; }
    / '.' { $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_DOT, range__new($0s, $0e)); }
    / '$' [1-9][0-9]* { $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_BACKREF, range__new($0s, $0e)); }
    / '<' _* a:alternation _* '>' { $$ = system__create_ast_node_unary(auxil, AST_NODE_TYPE_CAPTURE, range__new($0s, $0e), a); }
    / '(' _* a:alternation _* ')' { $$ = system__create_ast_node_unary(auxil, AST_NODE_TYPE_GROUP, range__new($0s, $0e), a); }

string
    <- '"' <("\\" . / [^"])*> '"'{ $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_STRING, range__new($1s, $1e)); }
    / "'" <("\\" . / [^'])*> "'" { $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_STRING, range__new($2s, $2e)); }

source <- '{' <([^{}]* source?)*> '}' { $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_SOURCE, range__new($1s, $1e)); }

character <- "\\" . / [^\]]
charClass <- "[" "^"? (character ("-" character)?)+ "]" { $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_CHARCLASS, range__new($0s, $0e)); }

identifier <- [_a-zA-Z][_a-zA-Z0-9]*
ruleref
    <- <identifier> ':' <identifier> !( _* "<-")
    {
        $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_RULEREF, range__new($2s, $2e));
        ast_node__append_child($$, system__create_ast_node_terminal(auxil, AST_NODE_TYPE_VAR, range__new($1s, $1e)));
    }
    / <identifier> !( _* "<-")
    {
        $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_RULEREF, range__new($3s, $3e));
    }

prefixOp <- [&!] { $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_PREFIX_OP, range__new($0s, $0e)); }
postfixOp <- [?*+] { $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_POSTFIX_OP, range__new($0s, $0e)); }

comment <- _* '#'+ [ \t]* <[^\n]*> {
    $$ = system__create_ast_node_terminal(auxil, AST_NODE_TYPE_COMMENT, range__new($1s, $1e));
}
_ <- [ \t\r\n]+
EOF <- !.
