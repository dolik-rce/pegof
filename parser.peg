%prefix "peg"

%value "AstNodeC"

%header {
    #include "c_api.h"
    /*
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
    //*/
}

%source { #define PCC_GETCHAR(auxil) source_read(auxil) }

grammar <- _* l:statement_list _* <c:code?> EOF {
        $$ = l;
        if ($1s != $1e) append_child($$, c);
    }

statement_list
    <- l:statement_list _* s:statement {
        $$ = l;
        append_child($$, s);
    }
    / s:statement {
        $$ = create_ast_node(AST_GRAMMAR);
        append_child($$, s);
    }

statement
    <- d:directive { $$ = d; }
    / r:rule { $$ = r; }
    / c:line_comment { $$ = c; }
    / c:suffix_comment { $$ = c; } # this is needed to parse comment on first line (not preceeded by newline)

rule <- <identifier> _* "<-" _* asp:alternation_or_sequence_or_primary {
        AstNodeC name = create_ast_leaf(AST_RULE_NAME, $1, $1s);
        $$ = create_ast_node(AST_RULE);
        append_child($$, name);
        append_child($$, asp);
    }

directive
    <- "%" <"value" / "auxil" / "prefix"> _ s:string {
        AstNodeC name = create_ast_leaf(AST_DIRECTIVE_NAME, $1, $1s);
        $$ = create_ast_node(AST_DIRECTIVE);
        append_child($$, name);
        append_child($$, s);
    }
    / "%" <"header" / "source" / "common" / "earlyheader" / "earlysource" / "earlycommon"> _ s:source {
        AstNodeC name = create_ast_leaf(AST_DIRECTIVE_NAME, $2, $2s);
        $$ = create_ast_node(AST_DIRECTIVE);
        append_child($$, name);
        append_child($$, s);
    }

code <- "%%" [ \t\r\n]* <.*> { $$ = create_ast_leaf(AST_CODE, $1, $1s); }

alternation_or_sequence_or_primary
    <- a:alternation { $$ = a; }
    / sp:sequence_or_primary { $$ = sp; }

sequence_or_primary
    <- s:sequence { $$ = s; }
    / p:primary { $$ = p; }

alternation
    <- a:alternation _* "/" _* sp:sequence_or_primary {
        $$ = a;
        append_child($$, sp);
    }
    / sp1:sequence_or_primary _* "/" _* sp2:sequence_or_primary {
        $$ = create_ast_node(AST_ALTERNATION);
        append_child($$, sp1);
        append_child($$, sp2);
    }

sequence
    <- s:sequence _* p:primary {
        $$ = s;
        append_child($$, p);
    }
    / p1:primary _* p2:primary {
        $$ = create_ast_node(AST_SEQUENCE);
        append_child($$, p1);
        append_child($$, p2);
    }

primary
    <- c:suffix_comment { $$ = c; }
    / <pr:prefix_op?> _* l:literal _* <po:postfix_op?> (_* <s:source> / _* <e:error>)? {
        if ($1s == $1e && $2s == $2e && $3s == $3e && $4s == $4e) {
            $$ = l;
        } else {
            $$ = create_ast_node(AST_PRIMARY);
            if ($1s != $1e) append_child($$, pr);
            append_child($$, l);
            if ($2s != $2e) append_child($$, po);
            if ($3s != $3e) append_child($$, s);
            if ($4s != $4e) append_child($$, e);
        }
    }

literal
    <- r:ruleref { $$ = r; }
    / s:string { $$ = s; }
    / cc:char_class { $$ = cc; }
    / "." { $$ = create_ast_leaf(AST_DOT, $0, $0s); }
    / "$" [1-9] [0-9]* { $$ = create_ast_leaf(AST_BACKREF, $0, $0s); }
    / "<" _* asp:alternation_or_sequence_or_primary _* ">" { $$ = create_ast_node(AST_CAPTURE); append_child($$, asp); }
    / "(" _* asp:alternation_or_sequence_or_primary _* ")" { $$ = create_ast_node(AST_GROUP); append_child($$, asp); }

string
    <- "\"" <("\\" . / [^"])*> "\"" { $$ = create_ast_leaf(AST_STRING, $1, $1s); }
    / "'" <("\\" . / [^'])*> "'" { $$ = create_ast_leaf(AST_STRING, $2, $2s); }

error <- "~" _* "{" <source_code> "}" { $$ = create_ast_leaf(AST_ERROR, $1, $1s); }

source <- "{" <source_code> "}" { $$ = create_ast_leaf(AST_SOURCE, $1, $1s); }

source_code <- <([^{}]* ("{" source_code "}")?)*>

character
    <- "\\" .
    / [^\]]

char_class <- "[" "^"? (character ("-" character)?)+ "]" { $$ = create_ast_leaf(AST_CHARCLASS, $0, $0s); }

identifier <- [_a-zA-Z] [_a-zA-Z0-9]*

ruleref
    <- <identifier> ":" <identifier> !(_* "<-") {
        $$ = create_ast_leaf(AST_RULEREF, $2, $2s);
        append_child($$, create_ast_leaf(AST_VAR, $1, $1s));
    }
    / <identifier> !(_* "<-") { $$ = create_ast_leaf(AST_RULEREF, $3, $3s); }

prefix_op <- [&!] { $$ = create_ast_leaf(AST_PREFIX_OP, $0, $0s); }

postfix_op <- [?*+] { $$ = create_ast_leaf(AST_POSTFIX_OP, $0, $0s); }

line_comment <- "\n" [ \t]* "#" [ \t]* <[^\n]*> { $$ = create_ast_leaf(AST_COMMENT, $1, $1s); }

suffix_comment <- _* "#"+ [ \t]* <[^\n]*> { $$ = create_ast_leaf(AST_COMMENT, $1, $1s); }

_ <- !("\n" [ \t]* "#") [ \t\r\n]+

EOF <- !.
