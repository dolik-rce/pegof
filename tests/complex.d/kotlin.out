# Copyright (c) 2021 Jan Dolin√°r
#
# This source code is released for free distribution under the terms of the
# GNU General Public License version 2.
#
# This file contains description of Kotlin grammar based on the ANTLR grammar
# from https://github.com/Kotlin/kotlin-grammar-gpl2.
#
# Notes:
#   1. This file was originally derived from files (reference grammar files) in https://github.com/Kotlin/kotlin-spec
#   2. Kotlin/kotlin-spec is distributed under Apache2 license
#   3. I have requested the original developers to "re-license or dual-license" (see https://github.com/Kotlin/kotlin-spec/issues/70)
#   4. The request was accepted and the original developer made a new repository https://github.com/Kotlin/kotlin-grammar-gpl2
#      for redistributing the reference grammar files under GPLv2 license.
#   5. This file is now derived from Kotlin/kotlin-grammar-gpl2 repository.
#   6. Unlike many other files in Universal Ctags, this source code is released strictly under GPLv2
#      and should not be relicensed to later versions of GPL.

%prefix "pkotlin"

%auxil "struct parserCtx *"

%earlysource {
    #include "general.h"
}

%header { struct parserCtx; }

%source {
    #include "kotlin_pre.h"
}

file <- ("#!" [^\n\r]* _* NL+)? NL* ((
        "@"
        / (
            Hidden
            / NL
        ) "@"
    ) "file" !(
        Letter
        / UnicodeDigit
    ) NL* ":" _* NL* (
        "[" _* (
            userType __* valueArguments
            / userType
        )+ _* "]"
        / userType __* valueArguments
        / userType
    ) _* NL*)* _* ("package" !(
        Letter
        / UnicodeDigit
    ) { PUSH_KIND(auxil, K_PACKAGE); } _ <simpleIdentifier (__* "." simpleIdentifier)*> { makeKotlinTag(auxil, $1, $1s, true); } _* semi?)* _* ("import" !(
        Letter
        / UnicodeDigit
    ) _ simpleIdentifier (__* "." simpleIdentifier)* (
        ".*"
        / _ "as" !(
            Letter
            / UnicodeDigit
        ) _ simpleIdentifier
    )? _* semi? _*)* _* (
    (
        declaration _* (_* (
                ";"
                / NL
            ) _*)*
        / statement _* semi
    ) { resetFailure(auxil, $0s); }
    / _
    / [^\n]+ NL* { reportFailure(auxil, $0s); }
)* !.

declaration <-
    modifiers? (
        "class" !(
            Letter
            / UnicodeDigit
        ) { PUSH_KIND(auxil, K_CLASS); }
        / ("fun" !(
                Letter
                / UnicodeDigit
            ) __*)? "interface" !(
            Letter
            / UnicodeDigit
        ) { PUSH_KIND(auxil, K_INTERFACE); }
    ) _ NL* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, true); } (__* typeParameters)? (__* (modifiers? "constructor" !(
                Letter
                / UnicodeDigit
            ) __*)? "(" __* (classParameter (__* "," __* classParameter)* (__* ",")?)? __* ")")? (__* ":" __* annotatedDelegationSpecifier (__* "," __* annotatedDelegationSpecifier)*)? (__* typeConstraints)? (
        __* classBody
        / __* "{" __* ((modifiers __*)? simpleIdentifier (__* valueArguments)? (__* classBody)? (__* "," __* (modifiers __*)? simpleIdentifier (__* valueArguments)? (__* classBody)?)* __* ","?)? (__* ";" __* classMemberDeclarations)? __* "}"
    )? { POP_SCOPE(auxil); }
    / modifiers? _* "object" !(
        Letter
        / UnicodeDigit
    ) { PUSH_KIND(auxil, K_OBJECT); } __* <simpleIdentifier> { makeKotlinTag(auxil, $2, $1s, true); } (__* ":" __* annotatedDelegationSpecifier (__* "," __* annotatedDelegationSpecifier)*)? (__* classBody)? { POP_SCOPE(auxil); }
    / modifiers? _* "fun" !(
        Letter
        / UnicodeDigit
    ) { PUSH_KIND(auxil, K_METHOD); } _* (__* typeParameters)? _* (__* receiverTypeAndDot)? __* <simpleIdentifier> { makeKotlinTag(auxil, $3, $1s, true); } __* functionValueParameters _* (__* ":" __* type)? _* (__* typeConstraints)? _* (__* (
            block
            / "=" !"=" __* expression
        ))? { POP_SCOPE(auxil); }
    / modifiers? _* (
        "val" !(
            Letter
            / UnicodeDigit
        ) { PUSH_KIND(auxil, K_CONSTANT); }
        / "var" !(
            Letter
            / UnicodeDigit
        ) { PUSH_KIND(auxil, K_VARIABLE); }
    ) _ (__* typeParameters)? (__* receiverTypeAndDot)? __* (
        multiVariableDeclaration
        / variableDeclaration
    ) (__* typeConstraints)? (__* (
            "=" !"=" __* expression
            / "by" !(
                Letter
                / UnicodeDigit
            ) __* expression
        ))? (
        semi? _* setter (NL* semi? _* getter)?
        / semi? _* getter (NL* semi? _* setter)?
    )?
    / modifiers? _* "typealias" !(
        Letter
        / UnicodeDigit
    ) { PUSH_KIND(auxil, K_TYPEALIAS); } (
        _
        / NL
    )* <simpleIdentifier> { makeKotlinTag(auxil, $4, $1s, false); } _* (__* typeParameters)? __* "=" !"=" __* type

classBody <- "{" __* classMemberDeclarations __* "}"

classParameter <- (
    modifiers? _* "val" !(
        Letter
        / UnicodeDigit
    ) { PUSH_KIND(auxil, K_CONSTANT); }
    / modifiers? _* "var" !(
        Letter
        / UnicodeDigit
    ) { PUSH_KIND(auxil, K_VARIABLE); }
    / modifiers? { PUSH_KIND(auxil, K_IGNORE); } _*
)? __* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, true); } _* ":" __* type (__* "=" !"=" __* expression)? { POP_SCOPE(auxil); }

annotatedDelegationSpecifier <- annotation* __* (
    userType __* valueArguments
    / (
        userType
        / functionType
    ) __* "by" !(
        Letter
        / UnicodeDigit
    ) __* expression
    / userType
    / functionType
)

typeParameters <- "<" __* typeParameter (__* "," __* typeParameter)* (__* ",")? __* ">"

typeParameter <- (
    "reified" !(
        Letter
        / UnicodeDigit
    ) __*
    / (
        IN
        / "out" !(
            Letter
            / UnicodeDigit
        )
    ) __*
    / annotation
)* __* simpleIdentifier (__* ":" __* type)?

typeConstraints <- "where" !(
    Letter
    / UnicodeDigit
) __* annotation* simpleIdentifier __* ":" __* type (__* "," __* annotation* simpleIdentifier __* ":" __* type)*

# // SECTION: classMembers
classMemberDeclarations <- ((
        modifiers? "constructor" !(
            Letter
            / UnicodeDigit
        ) __* functionValueParameters (__* ":" __* (
                "this" !(
                    Letter
                    / UnicodeDigit
                ) __* valueArguments
                / "super" !(
                    Letter
                    / UnicodeDigit
                ) __* valueArguments
            ))? __* block?
        / "init" !(
            Letter
            / UnicodeDigit
        ) __* block
        / modifiers? "companion" !(
            Letter
            / UnicodeDigit
        ) __* ("data" !(
                Letter
                / UnicodeDigit
            ) __*)? "object" !(
            Letter
            / UnicodeDigit
        ) { PUSH_KIND(auxil, K_OBJECT); } <(__* simpleIdentifier)?> { makeKotlinTag(auxil, $1e-$1s != 0 ? $1 : "Companion", $1s, true); } (__* ":" __* annotatedDelegationSpecifier (__* "," __* annotatedDelegationSpecifier)*)? (__* classBody)? { POP_SCOPE(auxil); }
        / declaration
    ) (_* (
            ";"
            / NL
        ) _*)*)*

functionValueParameters <- "(" __* (functionValueParameter (__* "," __* functionValueParameter)* (__* ",")?)? __* ")"

functionValueParameter <- (
    annotation
    / "vararg" !(
        Letter
        / UnicodeDigit
    )
    / "noinline" !(
        Letter
        / UnicodeDigit
    )
    / "crossinline" !(
        Letter
        / UnicodeDigit
    )
)* _* simpleIdentifier __* ":" __* type (__* "=" !"=" __* expression)?

variableDeclaration <- annotation* __* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, false); } (__* ":" __* type)?

multiVariableDeclaration <- "(" __* variableDeclaration _* (__* "," __* variableDeclaration)* _* (__* ",")? __* ")"

# TODO: better handling of empty getters and setters?
getter <-
    (modifiers _*)? "get" !(
        Letter
        / UnicodeDigit
    ) __* "(" __* ")" (__* ":" __* type)? __* (
        block
        / "=" !"=" __* expression
    )
    / (modifiers _*)? "get" !(
        Letter
        / UnicodeDigit
    ) !(_* [^\n\r;])

setter <-
    (modifiers _*)? "set" !(
        Letter
        / UnicodeDigit
    ) __* "(" __* parameterWithOptionalType (__* ",")? __* ")" (__* ":" __* type)? __* (
        block
        / "=" !"=" __* expression
    )
    / (modifiers _*)? "set" !(
        Letter
        / UnicodeDigit
    ) !(_* [^\n\r;])

parameterWithOptionalType <- (
    annotation
    / "vararg" !(
        Letter
        / UnicodeDigit
    )
    / "noinline" !(
        Letter
        / UnicodeDigit
    )
    / "crossinline" !(
        Letter
        / UnicodeDigit
    )
)* simpleIdentifier __* (":" __* type)?

# // SECTION: types
type <- (
    annotation
    / SUSPEND __*
)* (
    functionType
    / nullableType
    / "(" __* type __* ")"
    / userType
    / "dynamic" !(
        Letter
        / UnicodeDigit
    )
)

nullableType <- (
    userType
    / "dynamic" !(
        Letter
        / UnicodeDigit
    )
    / "(" __* type __* ")"
) __* (!"?:" (
        "?" Hidden
        / "?"
    ))+

userType <- simpleIdentifier (__* typeArguments)? (__* "." __* simpleIdentifier (__* typeArguments)?)*

functionType <- (receiverType __* "." __*)? "(" __* (
    simpleIdentifier __* ":" __* type
    / type
)? _* (__* "," __* (
        simpleIdentifier __* ":" __* type
        / type
    ))* _* (__* ",")? __* ")" __* "->" __* type

receiverType <- ((
        annotation
        / SUSPEND __*
    )+ _*)? (
    nullableType
    / "(" __* type __* ")"
    / userType
    / "dynamic" !(
        Letter
        / UnicodeDigit
    )
)

# parenthesizedUserType <- LPAREN __* userType __* RPAREN / LPAREN __* parenthesizedUserType __* RPAREN
receiverTypeAndDot <- ((
        annotation
        / SUSPEND __*
    )+ _*)? (
    nullableType __* "." __*
    / "(" __* type __* ")" __* "." __*
    / (simpleIdentifier (__* typeArguments)? __* "." __*)+
)

# // SECTION: statements
#statements <- (statement (semis statement)*)? semis?
statements <- (statement _* ((_* (
                ";"
                / NL
            ) _*)+ _* statement _*)*)? _* (_* (
        ";"
        / NL
    ) _*)*

statement <- (
    label
    / annotation
)* (
    declaration
    / (
        postfixUnaryExpression _* (
            navigationSuffix
            / typeArguments
            / indexingSuffix
        )
        / postfixUnaryExpression
        / simpleIdentifier
        / parenthesizedDirectlyAssignableExpression
    ) _* "=" !"=" __* expression
    / (
        ((
                annotation
                / label
                / prefixUnaryOperator __*
            ) _*)* postfixUnaryExpression
        / parenthesizedAssignableExpression
    ) _* (
        "+="
        / "-="
        / "*="
        / "/="
        / "%="
    ) __* expression
    / "for" !(
        Letter
        / UnicodeDigit
    ) __* "(" _* annotation* _* (
        variableDeclaration
        / multiVariableDeclaration
    ) _ IN _ inside_expression _* ")" __* (
        block
        / statement
    )?
    / "while" !(
        Letter
        / UnicodeDigit
    ) __* "(" _* inside_expression _* ")" __* (
        block
        / statement
    )
    / "while" !(
        Letter
        / UnicodeDigit
    ) __* "(" _* expression _* ")" __* ";"
    / "do" !(
        Letter
        / UnicodeDigit
    ) __* (
        block
        / statement
    )? __* "while" !(
        Letter
        / UnicodeDigit
    ) __* "(" _* expression _* ")"
    / expression
)

label <- simpleIdentifier (
    "@" (
        Hidden
        / NL
    )
    / "@"
) __*

block <- "{" __* statements __* "}"

semi <- _* (
    ";"
    / NL
) _* NL*

# // SECTION: expressions
expression <- equality (__* "&&" __* equality)* (__* "||" __* equality (__* "&&" __* equality)*)*

equality <- genericCallLikeComparison (_* (
        "<="
        / ">="
        / "<"
        / ">"
    ) __* genericCallLikeComparison _*)* (_* (
        "==="
        / "=="
        / "!=="
        / "!="
    ) __* genericCallLikeComparison (_* (
            "<="
            / ">="
            / "<"
            / ">"
        ) __* genericCallLikeComparison _*)* _*)*

genericCallLikeComparison <- elvisExpression (
    _* (
        IN
        / "!in" !(
            Letter
            / UnicodeDigit
        )
    ) __* elvisExpression
    / _* isOperator __* type
)* (_* callSuffix)*

elvisExpression <- rangeExpression (_* simpleIdentifier __* rangeExpression)* (__* "?:" __* rangeExpression (_* simpleIdentifier __* rangeExpression)*)*

rangeExpression <- multiplicativeExpression (_* (
        "+"
        / "-"
    ) __* multiplicativeExpression)* (_* (
        "..<"
        / ".."
    ) __* multiplicativeExpression (_* (
            "+"
            / "-"
        ) __* multiplicativeExpression)*)*

multiplicativeExpression <- asExpression (_* (
        "*"
        / "/"
        / "%"
    ) __* asExpression)*

asExpression <- ((
        annotation
        / label
        / prefixUnaryOperator __*
    ) _*)* postfixUnaryExpression (__* (
        "as?"
        / "as" !(
            Letter
            / UnicodeDigit
        )
    ) __* type)*

postfixUnaryExpression <-
    primaryExpression (_* (
            "++"
            / "--"
            / "!" (
                "!" Hidden
                / "!"
            )
            / typeArguments
            / callSuffix
            / indexingSuffix
            / navigationSuffix
        ))+
    / primaryExpression

parenthesizedDirectlyAssignableExpression <- "(" __* (
    inside_postfixUnaryExpression (
        _
        / NL
    )* (
        navigationSuffix
        / typeArguments
        / indexingSuffix
    )
    / inside_postfixUnaryExpression
    / simpleIdentifier
    / parenthesizedDirectlyAssignableExpression
) __* ")"

parenthesizedAssignableExpression <- "(" __* (
    ((
            annotation
            / label
            / prefixUnaryOperator __*
        ) (
            _
            / NL
        )*)* inside_postfixUnaryExpression
    / parenthesizedAssignableExpression
) __* ")"

indexingSuffix <- "[" __* inside_expression (__* "," __* inside_expression)* (__* ",")? __* "]"

navigationSuffix <- __* (
    "."
    / "?."
    / "::"
) __* (
    simpleIdentifier
    / "(" __* inside_expression __* ")"
    / "class" !(
        Letter
        / UnicodeDigit
    )
)

callSuffix <-
    typeArguments? _* valueArguments? _* annotation* _* label? __* lambdaLiteral
    / typeArguments? _* valueArguments

typeArguments <- "<" __* (
    (
        (
            IN
            / "out" !(
                Letter
                / UnicodeDigit
            )
        ) __*
        / annotation
    )* type
    / "*"
) (__* "," __* (
        (
            (
                IN
                / "out" !(
                    Letter
                    / UnicodeDigit
                )
            ) __*
            / annotation
        )* type
        / "*"
    ))* (__* ",")? __* ">"

valueArguments <-
    "(" __* ")"
    / "(" __* annotation? __* (simpleIdentifier __* "=" !"=" __*)? "*"? __* inside_expression (__* "," __* annotation? __* (simpleIdentifier __* "=" !"=" __*)? "*"? __* inside_expression)* (__* ",")? __* ")"

#valueArgument <- annotation? __* (simpleIdentifier __* ASSIGNMENT __*)? MULT? __* expression
primaryExpression <-
    "this@" Identifier
    / "this" !(
        Letter
        / UnicodeDigit
    ) !(
        Letter
        / UnicodeDigit
    )
    / "super@" Identifier
    / "super" !(
        Letter
        / UnicodeDigit
    ) ("<" __* type __* ">")? ("@" simpleIdentifier)?
    / "if" !(
        Letter
        / UnicodeDigit
    ) __* "(" __* expression __* ")" __* (
        block
        / statement
    )? __* ";"? __* "else" !(
        Letter
        / UnicodeDigit
    ) __* (
        block
        / statement
        / ";"
    )
    / "if" !(
        Letter
        / UnicodeDigit
    ) __* "(" __* expression __* ")" __* (
        block
        / statement
        / ";"
    )
    / "when" !(
        Letter
        / UnicodeDigit
    ) __* ("(" (annotation* __* "val" !(
                Letter
                / UnicodeDigit
            ) __* variableDeclaration __* "=" !"=" __*)? expression ")")? __* "{" __* ((
            (
                expression
                / (
                    IN
                    / "!in" !(
                        Letter
                        / UnicodeDigit
                    )
                ) __* expression
                / isOperator __* type
            ) (__* "," __* (
                    expression
                    / (
                        IN
                        / "!in" !(
                            Letter
                            / UnicodeDigit
                        )
                    ) __* expression
                    / isOperator __* type
                ))* (__* ",")? __* "->" __* (
                block
                / statement
            ) semi?
            / "else" !(
                Letter
                / UnicodeDigit
            ) __* "->" __* (
                block
                / statement
            ) semi?
        ) __*)* __* "}"
    / "try" !(
        Letter
        / UnicodeDigit
    ) __* block (
        (__* "catch" !(
                Letter
                / UnicodeDigit
            ) __* "(" _* (annotation _*)* simpleIdentifier _* ":" _* type (__* ",")? _* ")" __* block)+ (__* "finally" !(
                Letter
                / UnicodeDigit
            ) __* block)?
        / __* "finally" !(
            Letter
            / UnicodeDigit
        ) __* block
    )
    / "throw" !(
        Letter
        / UnicodeDigit
    ) __* expression
    / (
        "return@" Identifier
        / "return" !(
            Letter
            / UnicodeDigit
        )
    ) _* expression?
    / "continue@" Identifier
    / "continue" !(
        Letter
        / UnicodeDigit
    )
    / "break@" Identifier
    / "break" !(
        Letter
        / UnicodeDigit
    )
    / "(" __* inside_expression __* ")"
    / receiverType? __* "::" __* (
        simpleIdentifier
        / "class" !(
            Letter
            / UnicodeDigit
        )
    )
    / "\"\"\"" (
        "${" __* expression __* "}"
        / FieldIdentifier
        / [^"$]+
        / "$"
        / "\"\"" !"\""
        / "\"" !"\"\""
        / "\"\"" !"\""
        / "\"" !"\"\""
    )* (
        "\"\"\"\"\""
        / "\"\"\"\""
        / "\"\"\""
    )
    / "\"" !"\"\"" (
        "${" __* expression __* "}"
        / [^"$\\]+
        / "$"
        / "\\" (
            "t"
            / "b"
            / "r"
            / "n"
            / "'"
            / "\""
            / "\\"
            / "$"
        )
        / "\\u" HexDigit HexDigit HexDigit HexDigit
        / FieldIdentifier
    )* "\""
    / lambdaLiteral
    / (SUSPEND __*)? "fun" !(
        Letter
        / UnicodeDigit
    ) { PUSH_KIND(auxil, K_METHOD); makeKotlinTag(auxil, "<anonymous>", $0s, true); } (__* type __* ".")? __* "(" __* (parameterWithOptionalType (__* "," __* parameterWithOptionalType)* (__* ",")?)? __* ")" (__* ":" __* type)? (__* typeConstraints)? (__* (
            block
            / "=" !"=" __* expression
        ))? { POP_SCOPE(auxil); }
    / ("data" !(
            Letter
            / UnicodeDigit
        ) __*)? "object" !(
        Letter
        / UnicodeDigit
    ) __* ":" __* annotatedDelegationSpecifier (__* "," __* annotatedDelegationSpecifier)* __* classBody
    / "object" !(
        Letter
        / UnicodeDigit
    ) __* classBody
    / "[" __* inside_expression (__* "," __* inside_expression)* (__* ",")? __* "]"
    / "[" __* "]"
    / simpleIdentifier
    / "true"
    / "false"
    / "'" (
        "\\u" HexDigit HexDigit HexDigit HexDigit
        / "\\" (
            "t"
            / "b"
            / "r"
            / "n"
            / "'"
            / "\""
            / "\\"
            / "$"
        )
        / [^\n\r'\\]
    ) "'"
    / "null"
    / (
        DecDigits? "." DecDigits ([Ee] [-+]? DecDigits)?
        / DecDigits [Ee] [-+]? DecDigits
    ) [Ff]
    / DecDigits [Ff]
    / DecDigits? "." DecDigits ([Ee] [-+]? DecDigits)?
    / DecDigits [Ee] [-+]? DecDigits
    / (
        HexLiteral
        / BinLiteral
        / [1-9] (
            [0-9]
            / "_"
        )*
        / [0-9]
    ) [Uu] [Ll]?
    / (
        HexLiteral
        / BinLiteral
        / [1-9] (
            [0-9]
            / "_"
        )*
        / [0-9]
    ) [Ll]
    / HexLiteral
    / BinLiteral
    / [1-9] (
        [0-9]
        / "_"
    )*
    / [0-9]

inside_expression <- inside_equality (__* "&&" __* inside_equality)* (__* "||" __* inside_equality (__* "&&" __* inside_equality)*)*

inside_equality <- inside_comparison ((
        _
        / NL
    )* (
        "==="
        / "=="
        / "!=="
        / "!="
    ) __* inside_comparison (
        _
        / NL
    )*)*

inside_comparison <- inside_genericCallLikeComparison ((
        _
        / NL
    )* (
        "<="
        / ">="
        / "<"
        / ">"
    ) __* inside_genericCallLikeComparison (
        _
        / NL
    )*)*

inside_genericCallLikeComparison <- inside_infixFunctionCall (__* "?:" __* inside_infixFunctionCall)* (
    (
        _
        / NL
    )* (
        IN
        / "!in" !(
            Letter
            / UnicodeDigit
        )
    ) __* inside_infixFunctionCall (__* "?:" __* inside_infixFunctionCall)*
    / (
        _
        / NL
    )* isOperator __* type
)* ((
        _
        / NL
    )* callSuffix)*

inside_infixFunctionCall <- inside_additiveExpression ((
        _
        / NL
    )* ".." __* inside_additiveExpression)* ((
        _
        / NL
    )* simpleIdentifier __* inside_additiveExpression ((
            _
            / NL
        )* ".." __* inside_additiveExpression)*)*

inside_additiveExpression <- inside_asExpression ((
        _
        / NL
    )* (
        "*"
        / "/"
        / "%"
    ) __* inside_asExpression)* ((
        _
        / NL
    )* (
        "+"
        / "-"
    ) __* inside_asExpression ((
            _
            / NL
        )* (
            "*"
            / "/"
            / "%"
        ) __* inside_asExpression)*)*

inside_asExpression <- ((
        annotation
        / label
        / prefixUnaryOperator __*
    ) (
        _
        / NL
    )*)* inside_postfixUnaryExpression (__* (
        "as?"
        / "as" !(
            Letter
            / UnicodeDigit
        )
    ) __* type)*

inside_postfixUnaryExpression <-
    primaryExpression ((
            _
            / NL
        )* (
            "++"
            / "--"
            / "!" (
                "!" Hidden
                / "!"
            )
            / typeArguments
            / callSuffix
            / indexingSuffix
            / navigationSuffix
        ))+
    / primaryExpression

#characterLiteral <- "'" (UniCharacterLiteral / EscapedIdentifier / [^\n\r'\\]) "'"
#stringChar <- [^"]
lambdaLiteral <-
    "{" { PUSH_KIND(auxil, K_METHOD); makeKotlinTag(auxil, "<lambda>", $0s, true); } __* statements __* "}" { POP_SCOPE(auxil); }
    / "{" { PUSH_KIND(auxil, K_METHOD); makeKotlinTag(auxil, "<lambda>", 8, true); } __* ((
            variableDeclaration
            / multiVariableDeclaration (__* ":" __* type)?
        ) (__* "," __* (
                variableDeclaration
                / multiVariableDeclaration (__* ":" __* type)?
            ))* (__* ",")?)? __* "->" __* statements __* "}" { POP_SCOPE(auxil); }

isOperator <-
    "is" !(
        Letter
        / UnicodeDigit
    )
    / "!is" !(
        Letter
        / UnicodeDigit
    )

prefixUnaryOperator <-
    "++"
    / "--"
    / "-"
    / "+"
    / "!" Hidden
    / "!"

# // SECTION: modifiers
modifiers <- (
    annotation
    / (
        "enum" !(
            Letter
            / UnicodeDigit
        )
        / "sealed" !(
            Letter
            / UnicodeDigit
        )
        / "annotation" !(
            Letter
            / UnicodeDigit
        )
        / "data" !(
            Letter
            / UnicodeDigit
        )
        / "inner" !(
            Letter
            / UnicodeDigit
        )
        / "override" !(
            Letter
            / UnicodeDigit
        )
        / "lateinit" !(
            Letter
            / UnicodeDigit
        )
        / "public" !(
            Letter
            / UnicodeDigit
        )
        / "private" !(
            Letter
            / UnicodeDigit
        )
        / "internal" !(
            Letter
            / UnicodeDigit
        )
        / "protected" !(
            Letter
            / UnicodeDigit
        )
        / "tailrec" !(
            Letter
            / UnicodeDigit
        )
        / "operator" !(
            Letter
            / UnicodeDigit
        )
        / "infix" !(
            Letter
            / UnicodeDigit
        )
        / "inline" !(
            Letter
            / UnicodeDigit
        )
        / "external" !(
            Letter
            / UnicodeDigit
        )
        / SUSPEND
        / "const" !(
            Letter
            / UnicodeDigit
        )
        / "abstract" !(
            Letter
            / UnicodeDigit
        )
        / "final" !(
            Letter
            / UnicodeDigit
        )
        / "open" !(
            Letter
            / UnicodeDigit
        )
        / "vararg" !(
            Letter
            / UnicodeDigit
        )
        / "noinline" !(
            Letter
            / UnicodeDigit
        )
        / "crossinline" !(
            Letter
            / UnicodeDigit
        )
        / "expect" !(
            Letter
            / UnicodeDigit
        )
        / "actual" !(
            Letter
            / UnicodeDigit
        )
    ) __*
)+

# // SECTION: annotations
annotation <- (
    annotationUseSiteTarget __* (
        userType __* valueArguments
        / userType
    )
    / (
        "@"
        / (
            Hidden
            / NL
        ) "@"
    ) (
        userType __* valueArguments
        / userType
    )
    / annotationUseSiteTarget __* "[" (
        userType __* valueArguments
        / userType
    )+ "]"
    / (
        "@"
        / (
            Hidden
            / NL
        ) "@"
    ) "[" (
        userType __* valueArguments
        / userType
    )+ "]"
) __*

annotationUseSiteTarget <- (
    "@"
    / (
        Hidden
        / NL
    ) "@"
) (
    "field" !(
        Letter
        / UnicodeDigit
    )
    / "property" !(
        Letter
        / UnicodeDigit
    )
    / "get" !(
        Letter
        / UnicodeDigit
    )
    / "set" !(
        Letter
        / UnicodeDigit
    )
    / "receiver" !(
        Letter
        / UnicodeDigit
    )
    / "param" !(
        Letter
        / UnicodeDigit
    )
    / "setparam" !(
        Letter
        / UnicodeDigit
    )
    / "delegate" !(
        Letter
        / UnicodeDigit
    )
) __* ":"

# // SECTION: identifiers
simpleIdentifier <-
    !((
            "as" !(
                Letter
                / UnicodeDigit
            )
            / "break" !(
                Letter
                / UnicodeDigit
            )
            / "class" !(
                Letter
                / UnicodeDigit
            )
            / "continue" !(
                Letter
                / UnicodeDigit
            )
            / "do" !(
                Letter
                / UnicodeDigit
            )
            / "else" !(
                Letter
                / UnicodeDigit
            )
            / "for" !(
                Letter
                / UnicodeDigit
            )
            / "fun" !(
                Letter
                / UnicodeDigit
            )
            / "if" !(
                Letter
                / UnicodeDigit
            )
            / IN
            / "interface" !(
                Letter
                / UnicodeDigit
            )
            / "is" !(
                Letter
                / UnicodeDigit
            )
            / "null"
            / "object" !(
                Letter
                / UnicodeDigit
            )
            / "package" !(
                Letter
                / UnicodeDigit
            )
            / "return" !(
                Letter
                / UnicodeDigit
            )
            / "super" !(
                Letter
                / UnicodeDigit
            )
            / "this" !(
                Letter
                / UnicodeDigit
            )
            / "throw" !(
                Letter
                / UnicodeDigit
            )
            / "try" !(
                Letter
                / UnicodeDigit
            )
            / "typealias" !(
                Letter
                / UnicodeDigit
            )
            / "typeof" !(
                Letter
                / UnicodeDigit
            )
            / "val" !(
                Letter
                / UnicodeDigit
            )
            / "var" !(
                Letter
                / UnicodeDigit
            )
            / "when" !(
                Letter
                / UnicodeDigit
            )
            / "while" !(
                Letter
                / UnicodeDigit
            )
            / "true"
            / "false"
        ) !(
            Letter
            / "_"
            / UnicodeDigit
        )) Identifier
    / "abstract" !(
        Letter
        / UnicodeDigit
    )
    / "annotation" !(
        Letter
        / UnicodeDigit
    )
    / "by" !(
        Letter
        / UnicodeDigit
    )
    / "catch" !(
        Letter
        / UnicodeDigit
    )
    / "companion" !(
        Letter
        / UnicodeDigit
    )
    / "constructor" !(
        Letter
        / UnicodeDigit
    )
    / "crossinline" !(
        Letter
        / UnicodeDigit
    )
    / "data" !(
        Letter
        / UnicodeDigit
    )
    / "dynamic" !(
        Letter
        / UnicodeDigit
    )
    / "enum" !(
        Letter
        / UnicodeDigit
    )
    / "external" !(
        Letter
        / UnicodeDigit
    )
    / "final" !(
        Letter
        / UnicodeDigit
    )
    / "finally" !(
        Letter
        / UnicodeDigit
    )
    / "get" !(
        Letter
        / UnicodeDigit
    )
    / "import" !(
        Letter
        / UnicodeDigit
    )
    / "infix" !(
        Letter
        / UnicodeDigit
    )
    / "init" !(
        Letter
        / UnicodeDigit
    )
    / "inline" !(
        Letter
        / UnicodeDigit
    )
    / "inner" !(
        Letter
        / UnicodeDigit
    )
    / "internal" !(
        Letter
        / UnicodeDigit
    )
    / "lateinit" !(
        Letter
        / UnicodeDigit
    )
    / "noinline" !(
        Letter
        / UnicodeDigit
    )
    / "open" !(
        Letter
        / UnicodeDigit
    )
    / "operator" !(
        Letter
        / UnicodeDigit
    )
    / "out" !(
        Letter
        / UnicodeDigit
    )
    / "override" !(
        Letter
        / UnicodeDigit
    )
    / "private" !(
        Letter
        / UnicodeDigit
    )
    / "protected" !(
        Letter
        / UnicodeDigit
    )
    / "public" !(
        Letter
        / UnicodeDigit
    )
    / "reified" !(
        Letter
        / UnicodeDigit
    )
    / "sealed" !(
        Letter
        / UnicodeDigit
    )
    / "tailrec" !(
        Letter
        / UnicodeDigit
    )
    / "set" !(
        Letter
        / UnicodeDigit
    )
    / "vararg" !(
        Letter
        / UnicodeDigit
    )
    / "where" !(
        Letter
        / UnicodeDigit
    )
    / "field" !(
        Letter
        / UnicodeDigit
    )
    / "property" !(
        Letter
        / UnicodeDigit
    )
    / "receiver" !(
        Letter
        / UnicodeDigit
    )
    / "param" !(
        Letter
        / UnicodeDigit
    )
    / "setparam" !(
        Letter
        / UnicodeDigit
    )
    / "delegate" !(
        Letter
        / UnicodeDigit
    )
    / "file" !(
        Letter
        / UnicodeDigit
    )
    / "expect" !(
        Letter
        / UnicodeDigit
    )
    / "actual" !(
        Letter
        / UnicodeDigit
    )
    / "const" !(
        Letter
        / UnicodeDigit
    )
    / SUSPEND

DelimitedComment <- "/*" (
    DelimitedComment
    / !"*/" .
)* "*/"

#WS <- [\u0020\u0009\u000C]
#NL <- '\n' / '\r' '\n'?
Hidden <-
    DelimitedComment
    / "//" [^\n\r]*
    / [\t\f ]

IN <- "in" !(
    Letter
    / UnicodeDigit
)

SUSPEND <- "suspend" !(
    Letter
    / UnicodeDigit
)

DecDigits <-
    [0-9] (
        [0-9]
        / "_"
    )*
    / [0-9]

#IntegerLiteral <- DecDigitNoZero DecDigitOrSeparator* DecDigit / DecDigit
HexDigit <- [0-9A-Fa-f]

HexLiteral <-
    "0" [Xx] HexDigit (
        HexDigit
        / "_"
    )*
    / "0" [Xx] HexDigit

BinLiteral <-
    "0" [Bb] [01] (
        [01]
        / "_"
    )*
    / "0" [Bb] [01]

# // SECTION: lexicalIdentifiers
#UnicodeDigit <- UNICODE_CLASS_ND
Identifier <-
    "`" [^\n\r`]+ "`"
    / (
        Letter
        / "_"
    ) (
        Letter
        / "_"
        / UnicodeDigit
    )*

FieldIdentifier <- "$" (
    Identifier
    / "abstract" !(
        Letter
        / UnicodeDigit
    )
    / "annotation" !(
        Letter
        / UnicodeDigit
    )
    / "by" !(
        Letter
        / UnicodeDigit
    )
    / "catch" !(
        Letter
        / UnicodeDigit
    )
    / "companion" !(
        Letter
        / UnicodeDigit
    )
    / "constructor" !(
        Letter
        / UnicodeDigit
    )
    / "crossinline" !(
        Letter
        / UnicodeDigit
    )
    / "data" !(
        Letter
        / UnicodeDigit
    )
    / "dynamic" !(
        Letter
        / UnicodeDigit
    )
    / "enum" !(
        Letter
        / UnicodeDigit
    )
    / "external" !(
        Letter
        / UnicodeDigit
    )
    / "final" !(
        Letter
        / UnicodeDigit
    )
    / "finally" !(
        Letter
        / UnicodeDigit
    )
    / "import" !(
        Letter
        / UnicodeDigit
    )
    / "infix" !(
        Letter
        / UnicodeDigit
    )
    / "init" !(
        Letter
        / UnicodeDigit
    )
    / "inline" !(
        Letter
        / UnicodeDigit
    )
    / "inner" !(
        Letter
        / UnicodeDigit
    )
    / "internal" !(
        Letter
        / UnicodeDigit
    )
    / "lateinit" !(
        Letter
        / UnicodeDigit
    )
    / "noinline" !(
        Letter
        / UnicodeDigit
    )
    / "open" !(
        Letter
        / UnicodeDigit
    )
    / "operator" !(
        Letter
        / UnicodeDigit
    )
    / "out" !(
        Letter
        / UnicodeDigit
    )
    / "override" !(
        Letter
        / UnicodeDigit
    )
    / "private" !(
        Letter
        / UnicodeDigit
    )
    / "protected" !(
        Letter
        / UnicodeDigit
    )
    / "public" !(
        Letter
        / UnicodeDigit
    )
    / "reified" !(
        Letter
        / UnicodeDigit
    )
    / "sealed" !(
        Letter
        / UnicodeDigit
    )
    / "tailrec" !(
        Letter
        / UnicodeDigit
    )
    / "vararg" !(
        Letter
        / UnicodeDigit
    )
    / "where" !(
        Letter
        / UnicodeDigit
    )
    / "get" !(
        Letter
        / UnicodeDigit
    )
    / "set" !(
        Letter
        / UnicodeDigit
    )
    / "field" !(
        Letter
        / UnicodeDigit
    )
    / "property" !(
        Letter
        / UnicodeDigit
    )
    / "receiver" !(
        Letter
        / UnicodeDigit
    )
    / "param" !(
        Letter
        / UnicodeDigit
    )
    / "setparam" !(
        Letter
        / UnicodeDigit
    )
    / "delegate" !(
        Letter
        / UnicodeDigit
    )
    / "file" !(
        Letter
        / UnicodeDigit
    )
    / "expect" !(
        Letter
        / UnicodeDigit
    )
    / "actual" !(
        Letter
        / UnicodeDigit
    )
    / "const" !(
        Letter
        / UnicodeDigit
    )
    / SUSPEND
)

# // SECTION: characters
Letter <- [A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400\u4db5\u4e00\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]

UnicodeDigit <- [0-9\u0660-\u0669\u06f0-\u06f9\u07c0-\u07c9\u0966-\u096f\u09e6-\u09ef\u0a66-\u0a6f\u0ae6-\u0aef\u0b66-\u0b6f\u0be6-\u0bef\u0c66-\u0c6f\u0ce6-\u0cef\u0d66-\u0d6f\u0e50-\u0e59\u0ed0-\u0ed9\u0f20-\u0f29\u1040-\u1049\u1090-\u1099\u17e0-\u17e9\u1810-\u1819\u1946-\u194f\u19d0-\u19d9\u1a80-\u1a89\u1a90-\u1a99\u1b50-\u1b59\u1bb0-\u1bb9\u1c40-\u1c49\u1c50-\u1c59\ua620-\ua629\ua8d0-\ua8d9\ua900-\ua909\ua9d0-\ua9d9\uaa50-\uaa59\uabf0-\uabf9\uff10-\uff19]

_ <- (
    [\t\f ]
    / DelimitedComment
    / "//" [^\n\r]*
)+

__ <- (
    [\t\n\f\r ]
    / DelimitedComment
    / "//" [^\n\r]*
)+

NL <- _* (
    "\n"
    / "\r" "\n"?
) _*

%%
#include "kotlin_post.h"
