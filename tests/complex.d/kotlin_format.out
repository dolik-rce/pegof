# Copyright (c) 2021 Jan Dolin√°r
#
# This source code is released for free distribution under the terms of the
# GNU General Public License version 2.
#
# This file contains description of Kotlin grammar based on the ANTLR grammar
# from https://github.com/Kotlin/kotlin-grammar-gpl2.
#
# Notes:
#   1. This file was originally derived from files (reference grammar files) in https://github.com/Kotlin/kotlin-spec
#   2. Kotlin/kotlin-spec is distributed under Apache2 license
#   3. I have requested the original developers to "re-license or dual-license" (see https://github.com/Kotlin/kotlin-spec/issues/70)
#   4. The request was accepted and the original developer made a new repository https://github.com/Kotlin/kotlin-grammar-gpl2
#      for redistributing the reference grammar files under GPLv2 license.
#   5. This file is now derived from Kotlin/kotlin-grammar-gpl2 repository.
#   6. Unlike many other files in Universal Ctags, this source code is released strictly under GPLv2
#      and should not be relicensed to later versions of GPL.

%prefix "pkotlin"

%auxil "struct parserCtx *"

%earlysource {
    #include "general.h"
}

%header { struct parserCtx; }

%source {
    #include "kotlin_pre.h"
}

file <- shebangLine? NL* fileAnnotation* _* packageHeader* _* importList* _* (
    filePart
    / _
    / unparsable
)* EOF

filePart <- (
    topLevelObject
    / (statement _* semi)
) { resetFailure(auxil, $0s); }

unparsable <- [^\n]+ NL* { reportFailure(auxil, $0s); }

### Converted from peg/kotlin/KotlinParser.g4
#
# options
# // SECTION: general
#kotlinFile <- shebangLine? NL* fileAnnotation* _* packageHeader _* importList _* topLevelObject* EOF
#script <- shebangLine? NL* fileAnnotation* _* packageHeader _* importList _* (statement _* semi)* EOF
shebangLine <- ShebangLine _* NL+

fileAnnotation <- (
    AT_NO_WS
    / AT_PRE_WS
) FILE NL* COLON _* NL* (
    LSQUARE _* unescapedAnnotation+ _* RSQUARE
    / unescapedAnnotation
) _* NL*

packageHeader <- PACKAGE { PUSH_KIND(auxil, K_PACKAGE); } _ <identifier> { makeKotlinTag(auxil, $1, $1s, true); } _* semi?

importList <- importHeader+

importHeader <- IMPORT _ identifier (
    DOT MULT
    / importAlias
)? _* semi? _*

importAlias <- _ AS _ simpleIdentifier

topLevelObject <- declaration _* semis?

typeAlias <- modifiers? _* TYPE_ALIAS { PUSH_KIND(auxil, K_TYPEALIAS); } (
    _
    / NL
)* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, false); } _* (__* typeParameters)? __* ASSIGNMENT __* type

declaration <-
    classDeclaration
    / objectDeclaration
    / functionDeclaration
    / propertyDeclaration
    / typeAlias

# // SECTION: classes
classDeclaration <- modifiers? (
    CLASS { PUSH_KIND(auxil, K_CLASS); }
    / (FUN __*)? INTERFACE { PUSH_KIND(auxil, K_INTERFACE); }
) _ NL* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, true); } (__* typeParameters)? (__* primaryConstructor)? (__* COLON __* delegationSpecifiers)? (__* typeConstraints)? (
    __* classBody
    / __* enumClassBody
)? { POP_SCOPE(auxil); }

primaryConstructor <- (modifiers? CONSTRUCTOR __*)? classParameters

classBody <- LCURL __* classMemberDeclarations __* RCURL

classParameters <- LPAREN __* (classParameter (__* COMMA __* classParameter)* (__* COMMA)?)? __* RPAREN

classParameter <- (
    modifiers? _* VAL { PUSH_KIND(auxil, K_CONSTANT); }
    / modifiers? _* VAR { PUSH_KIND(auxil, K_VARIABLE); }
    / modifiers? { PUSH_KIND(auxil, K_IGNORE); } _*
)? __* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, true); } _* COLON __* type (__* ASSIGNMENT __* expression)? { POP_SCOPE(auxil); }

delegationSpecifiers <- annotatedDelegationSpecifier (__* COMMA __* annotatedDelegationSpecifier)*

delegationSpecifier <-
    constructorInvocation
    / explicitDelegation
    / userType
    / functionType

constructorInvocation <- userType __* valueArguments

annotatedDelegationSpecifier <- annotation* __* delegationSpecifier

explicitDelegation <- (
    userType
    / functionType
) __* BY __* expression

typeParameters <- LANGLE __* typeParameter (__* COMMA __* typeParameter)* (__* COMMA)? __* RANGLE

typeParameter <- typeParameterModifiers? __* simpleIdentifier (__* COLON __* type)?

typeConstraints <- WHERE __* typeConstraint (__* COMMA __* typeConstraint)*

typeConstraint <- annotation* simpleIdentifier __* COLON __* type

# // SECTION: classMembers
classMemberDeclarations <- (classMemberDeclaration semis?)*

classMemberDeclaration <-
    secondaryConstructor
    / anonymousInitializer
    / companionObject
    / declaration

anonymousInitializer <- INIT __* block

companionObject <- modifiers? COMPANION __* (DATA __*)? OBJECT { PUSH_KIND(auxil, K_OBJECT); } <(__* simpleIdentifier)?> { makeKotlinTag(auxil, $1e-$1s != 0 ? $1 : "Companion", $1s, true); } (__* COLON __* delegationSpecifiers)? (__* classBody)? { POP_SCOPE(auxil); }

functionValueParameters <- LPAREN __* (functionValueParameter (__* COMMA __* functionValueParameter)* (__* COMMA)?)? __* RPAREN

functionValueParameter <- parameterModifiers? _* parameter (__* ASSIGNMENT __* expression)?

functionDeclaration <- modifiers? _* FUN { PUSH_KIND(auxil, K_METHOD); } _* (__* typeParameters)? _* (__* receiverTypeAndDot)? __* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, true); } __* functionValueParameters _* (__* COLON __* type)? _* (__* typeConstraints)? _* (__* functionBody)? { POP_SCOPE(auxil); }

functionBody <-
    block
    / ASSIGNMENT __* expression

variableDeclaration <- annotation* __* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, false); } (__* COLON __* type)?

multiVariableDeclaration <- LPAREN __* variableDeclaration _* (__* COMMA __* variableDeclaration)* _* (__* COMMA)? __* RPAREN

propertyDeclaration <- modifiers? _* (
    VAL { PUSH_KIND(auxil, K_CONSTANT); }
    / VAR { PUSH_KIND(auxil, K_VARIABLE); }
) _ (__* typeParameters)? (__* receiverTypeAndDot)? (__* (
        multiVariableDeclaration
        / variableDeclaration
    )) (__* typeConstraints)? (__* (
        ASSIGNMENT __* expression
        / propertyDelegate
    ))? (
    semi? _* setter (NL* semi? _* getter)?
    / semi? _* getter (NL* semi? _* setter)?
)?

propertyDelegate <- BY __* expression

# TODO: better handling of empty getters and setters?
getter <-
    (modifiers _*)? GET __* LPAREN __* RPAREN (__* COLON __* type)? __* functionBody
    / (modifiers _*)? GET !(_* [^;\r\n])

setter <-
    (modifiers _*)? SET __* LPAREN __* parameterWithOptionalType (__* COMMA)? __* RPAREN (__* COLON __* type)? __* functionBody
    / (modifiers _*)? SET !(_* [^;\r\n])

parametersWithOptionalType <- LPAREN __* (parameterWithOptionalType (__* COMMA __* parameterWithOptionalType)* (__* COMMA)?)? __* RPAREN

parameterWithOptionalType <- parameterModifiers? simpleIdentifier __* (COLON __* type)?

parameter <- simpleIdentifier __* COLON __* type

objectDeclaration <- modifiers? _* OBJECT { PUSH_KIND(auxil, K_OBJECT); } __* <simpleIdentifier> { makeKotlinTag(auxil, $1, $1s, true); } (__* COLON __* delegationSpecifiers)? (__* classBody)? { POP_SCOPE(auxil); }

secondaryConstructor <- modifiers? CONSTRUCTOR __* functionValueParameters (__* COLON __* constructorDelegationCall)? __* block?

constructorDelegationCall <-
    THIS __* valueArguments
    / SUPER __* valueArguments

# // SECTION: enumClasses
enumClassBody <- LCURL __* enumEntries? (__* SEMICOLON __* classMemberDeclarations)? __* RCURL

enumEntries <- enumEntry (__* COMMA __* enumEntry)* __* COMMA?

enumEntry <- (modifiers __*)? simpleIdentifier (__* valueArguments)? (__* classBody)?

# // SECTION: types
type <- typeModifiers? (
    functionType
    / nullableType
    / parenthesizedType
    / typeReference
)

typeReference <-
    userType
    / DYNAMIC

nullableType <- (
    typeReference
    / parenthesizedType
) __* quest+

quest <- !elvis (
    QUEST_WS
    / QUEST_NO_WS
)

userType <- simpleUserType (__* DOT __* simpleUserType)*

simpleUserType <- simpleIdentifier (__* typeArguments)?

typeProjection <-
    typeProjectionModifiers? type
    / MULT

typeProjectionModifiers <- typeProjectionModifier+

typeProjectionModifier <-
    varianceModifier __*
    / annotation

functionType <- (receiverType __* DOT __*)? functionTypeParameters __* ARROW __* type

functionTypeParameters <- LPAREN __* (
    parameter
    / type
)? _* (__* COMMA __* (
        parameter
        / type
    ))* _* (__* COMMA)? __* RPAREN

parenthesizedType <- LPAREN __* type __* RPAREN

receiverType <- (typeModifiers _*)? (
    nullableType
    / parenthesizedType
    / typeReference
)

# parenthesizedUserType <- LPAREN __* userType __* RPAREN / LPAREN __* parenthesizedUserType __* RPAREN
receiverTypeAndDot <- (typeModifiers _*)? (
    nullableType __* DOT __*
    / parenthesizedType __* DOT __*
    / (simpleUserType __* DOT __*)+
)

# // SECTION: statements
#statements <- (statement (semis statement)*)? semis?
statements <- (statement _* (semis _* statement _*)*)? _* semis?

statement <- (
    label
    / annotation
)* (
    declaration
    / assignment
    / loopStatement
    / expression
)

label <- simpleIdentifier (
    AT_POST_WS
    / AT_NO_WS
) __*

controlStructureBody <-
    block
    / statement

block <- LCURL __* statements __* RCURL

loopStatement <-
    forStatement
    / whileStatement
    / doWhileStatement

forStatement <- FOR __* LPAREN _* annotation* _* (
    variableDeclaration
    / multiVariableDeclaration
) _ IN _ inside_expression _* RPAREN __* (controlStructureBody)?

whileStatement <-
    WHILE __* LPAREN _* inside_expression _* RPAREN __* controlStructureBody
    / WHILE __* LPAREN _* expression _* RPAREN __* SEMICOLON

doWhileStatement <- DO __* controlStructureBody? __* WHILE __* LPAREN _* expression _* RPAREN

assignment <-
    directlyAssignableExpression _* ASSIGNMENT __* expression
    / assignableExpression _* assignmentAndOperator __* expression

semi <- (_* (
        SEMICOLON
        / NL
    ) _*) NL*

semis <- (_* (
        SEMICOLON
        / NL
    ) _*)+

# // SECTION: expressions
expression <- disjunction

disjunction <- conjunction (__* DISJ __* conjunction)*

conjunction <- equality (__* CONJ __* equality)*

equality <- comparison (_* equalityOperator __* comparison _*)*

comparison <- genericCallLikeComparison (_* comparisonOperator __* genericCallLikeComparison _*)*

genericCallLikeComparison <- infixOperation (_* callSuffix)*

infixOperation <- elvisExpression (
    _* inOperator __* elvisExpression
    / _* isOperator __* type
)*

elvisExpression <- infixFunctionCall (__* elvis __* infixFunctionCall)*

elvis <- QUEST_NO_WS COLON

infixFunctionCall <- rangeExpression (_* simpleIdentifier __* rangeExpression)*

rangeExpression <- additiveExpression (_* (
        RANGE_UNTIL
        / RANGE
    ) __* additiveExpression)*

additiveExpression <- multiplicativeExpression (_* additiveOperator __* multiplicativeExpression)*

multiplicativeExpression <- asExpression (_* multiplicativeOperator __* asExpression)*

asExpression <- prefixUnaryExpression (__* asOperator __* type)*

prefixUnaryExpression <- (unaryPrefix _*)* postfixUnaryExpression

unaryPrefix <-
    annotation
    / label
    / prefixUnaryOperator __*

postfixUnaryExpression <-
    primaryExpression (_* postfixUnarySuffix)+
    / primaryExpression

postfixUnarySuffix <-
    postfixUnaryOperator
    / typeArguments
    / callSuffix
    / indexingSuffix
    / navigationSuffix

directlyAssignableExpression <-
    postfixUnaryExpression _* assignableSuffix
    / postfixUnaryExpression
    / simpleIdentifier
    / parenthesizedDirectlyAssignableExpression

parenthesizedDirectlyAssignableExpression <- LPAREN __* inside_directlyAssignableExpression __* RPAREN

assignableExpression <-
    prefixUnaryExpression
    / parenthesizedAssignableExpression

parenthesizedAssignableExpression <- LPAREN __* inside_assignableExpression __* RPAREN

assignableSuffix <-
    navigationSuffix
    / typeArguments
    / indexingSuffix

indexingSuffix <- LSQUARE __* inside_expression (__* COMMA __* inside_expression)* (__* COMMA)? __* RSQUARE

navigationSuffix <- __* memberAccessOperator __* (
    simpleIdentifier
    / parenthesizedExpression
    / CLASS
)

callSuffix <-
    typeArguments? _* valueArguments? _* annotatedLambda
    / typeArguments? _* valueArguments

annotatedLambda <- annotation* _* label? __* lambdaLiteral

typeArguments <- LANGLE __* typeProjection (__* COMMA __* typeProjection)* (__* COMMA)? __* RANGLE

valueArguments <-
    LPAREN __* RPAREN
    / LPAREN __* inside_valueArgument (__* COMMA __* inside_valueArgument)* (__* COMMA)? __* RPAREN

#valueArgument <- annotation? __* (simpleIdentifier __* ASSIGNMENT __*)? MULT? __* expression
primaryExpression <-
    thisExpression
    / superExpression
    / ifExpression
    / whenExpression
    / tryExpression
    / jumpExpression
    / parenthesizedExpression
    / callableReference
    / stringLiteral
    / functionLiteral
    / objectLiteral
    / collectionLiteral
    / simpleIdentifier
    / literalConstant

parenthesizedExpression <- LPAREN __* inside_expression __* RPAREN

collectionLiteral <-
    LSQUARE __* inside_expression (__* COMMA __* inside_expression)* (__* COMMA)? __* RSQUARE
    / LSQUARE __* RSQUARE

literalConstant <-
    BooleanLiteral
    / CharacterLiteral
    / NullLiteral
    / RealLiteral
    / UnsignedLiteral
    / LongLiteral
    / HexLiteral
    / BinLiteral
    / IntegerLiteral

stringLiteral <-
    multiLineStringLiteral
    / lineStringLiteral

lineStringLiteral <- QUOTE_OPEN (
    lineStringExpression
    / lineStringContent
)* QUOTE_CLOSE

#lineStringLiteral <- QUOTE_OPEN (lineStringExpression / EscapedIdentifier / UniCharacterLiteral / stringChar)* QUOTE_CLOSE
multiLineStringLiteral <- TRIPLE_QUOTE_OPEN (
    multiLineStringExpression
    / multiLineStringContent
    / MultiLineStringQuote
)* TRIPLE_QUOTE_CLOSE

#multiLineStringLiteral <- TRIPLE_QUOTE_OPEN (multiLineStringExpression / MultiLineStringQuote / EscapedIdentifier / UniChracterLiteral / stringChar)* TRIPLE_QUOTE_CLOSE
lineStringContent <-
    LineStrText
    / LineStrEscapedChar
    / LineStrRef

lineStringExpression <- LineStrExprStart __* expression __* RCURL

multiLineStringContent <-
    MultiLineStrRef
    / MultiLineStrText
    / MultiLineStringQuote

multiLineStringExpression <- MultiLineStrExprStart __* expression __* RCURL

inside_expression <- inside_disjunction

inside_disjunction <- inside_conjunction (__* DISJ __* inside_conjunction)*

inside_conjunction <- inside_equality (__* CONJ __* inside_equality)*

inside_equality <- inside_comparison ((
        _
        / NL
    )* equalityOperator __* inside_comparison (
        _
        / NL
    )*)*

inside_comparison <- inside_genericCallLikeComparison ((
        _
        / NL
    )* comparisonOperator __* inside_genericCallLikeComparison (
        _
        / NL
    )*)*

inside_genericCallLikeComparison <- inside_infixOperation ((
        _
        / NL
    )* callSuffix)*

inside_infixOperation <- inside_elvisExpression (
    (
        _
        / NL
    )* inOperator __* inside_elvisExpression
    / (
        _
        / NL
    )* isOperator __* type
)*

inside_elvisExpression <- inside_infixFunctionCall (__* elvis __* inside_infixFunctionCall)*

inside_infixFunctionCall <- inside_rangeExpression ((
        _
        / NL
    )* simpleIdentifier __* inside_rangeExpression)*

inside_rangeExpression <- inside_additiveExpression ((
        _
        / NL
    )* RANGE __* inside_additiveExpression)*

inside_additiveExpression <- inside_multiplicativeExpression ((
        _
        / NL
    )* additiveOperator __* inside_multiplicativeExpression)*

inside_multiplicativeExpression <- inside_asExpression ((
        _
        / NL
    )* multiplicativeOperator __* inside_asExpression)*

inside_asExpression <- inside_prefixUnaryExpression (__* asOperator __* type)*

inside_prefixUnaryExpression <- (inside_unaryPrefix (
        _
        / NL
    )*)* inside_postfixUnaryExpression

inside_unaryPrefix <-
    annotation
    / label
    / prefixUnaryOperator __*

inside_postfixUnaryExpression <-
    primaryExpression ((
            _
            / NL
        )* inside_postfixUnarySuffix)+
    / primaryExpression

inside_postfixUnarySuffix <-
    postfixUnaryOperator
    / typeArguments
    / callSuffix
    / indexingSuffix
    / navigationSuffix

inside_directlyAssignableExpression <-
    inside_postfixUnaryExpression (
        _
        / NL
    )* assignableSuffix
    / inside_postfixUnaryExpression
    / simpleIdentifier
    / parenthesizedDirectlyAssignableExpression

inside_assignableExpression <-
    inside_prefixUnaryExpression
    / parenthesizedAssignableExpression

inside_valueArgument <- annotation? __* (simpleIdentifier __* ASSIGNMENT __*)? MULT? __* inside_expression

#characterLiteral <- "'" (UniCharacterLiteral / EscapedIdentifier / [^\n\r'\\]) "'"
#stringChar <- [^"]
lambdaLiteral <-
    LCURL { PUSH_KIND(auxil, K_METHOD); makeKotlinTag(auxil, "<lambda>", $0s, true); } __* statements __* RCURL { POP_SCOPE(auxil); }
    / LCURL { PUSH_KIND(auxil, K_METHOD); makeKotlinTag(auxil, "<lambda>", 8, true); } __* lambdaParameters? __* ARROW __* statements __* RCURL { POP_SCOPE(auxil); }

lambdaParameters <- lambdaParameter (__* COMMA __* lambdaParameter)* (__* COMMA)?

lambdaParameter <-
    variableDeclaration
    / multiVariableDeclaration (__* COLON __* type)?

anonymousFunction <- (SUSPEND __*)? FUN { PUSH_KIND(auxil, K_METHOD); makeKotlinTag(auxil, "<anonymous>", $0s, true); } (__* type __* DOT)? __* parametersWithOptionalType (__* COLON __* type)? (__* typeConstraints)? (__* functionBody)? { POP_SCOPE(auxil); }

functionLiteral <-
    lambdaLiteral
    / anonymousFunction

objectLiteral <-
    (DATA __*)? OBJECT __* COLON __* delegationSpecifiers __* classBody
    / OBJECT __* classBody

thisExpression <-
    THIS_AT
    / THIS !(
        Letter
        / UnicodeDigit
    )

superExpression <-
    SUPER_AT
    / SUPER (LANGLE __* type __* RANGLE)? (AT_NO_WS simpleIdentifier)?

ifExpression <-
    IF __* LPAREN __* expression __* RPAREN __* controlStructureBody? __* SEMICOLON? __* ELSE __* (
        controlStructureBody
        / SEMICOLON
    )
    / IF __* LPAREN __* expression __* RPAREN __* (
        controlStructureBody
        / SEMICOLON
    )

whenSubject <- LPAREN (annotation* __* VAL __* variableDeclaration __* ASSIGNMENT __*)? expression RPAREN

whenExpression <- WHEN __* whenSubject? __* LCURL __* (whenEntry __*)* __* RCURL

whenEntry <-
    whenCondition (__* COMMA __* whenCondition)* (__* COMMA)? __* ARROW __* controlStructureBody semi?
    / ELSE __* ARROW __* controlStructureBody semi?

whenCondition <-
    expression
    / rangeTest
    / typeTest

rangeTest <- inOperator __* expression

typeTest <- isOperator __* type

tryExpression <- TRY __* block (
    (__* catchBlock)+ (__* finallyBlock)?
    / __* finallyBlock
)

catchBlock <- CATCH __* LPAREN _* (annotation _*)* simpleIdentifier _* COLON _* type (__* COMMA)? _* RPAREN __* block

finallyBlock <- FINALLY __* block

jumpExpression <-
    THROW __* expression
    / (
        RETURN_AT
        / RETURN
    ) _* expression?
    / CONTINUE_AT
    / CONTINUE
    / BREAK_AT
    / BREAK

callableReference <- (receiverType? __* COLONCOLON __* (
        simpleIdentifier
        / CLASS
    ))

assignmentAndOperator <-
    ADD_ASSIGNMENT
    / SUB_ASSIGNMENT
    / MULT_ASSIGNMENT
    / DIV_ASSIGNMENT
    / MOD_ASSIGNMENT

equalityOperator <-
    EQEQEQ
    / EQEQ
    / EXCL_EQEQ
    / EXCL_EQ

comparisonOperator <-
    LE
    / GE
    / LANGLE
    / RANGLE

inOperator <-
    IN
    / NOT_IN

isOperator <-
    IS
    / NOT_IS

additiveOperator <-
    ADD
    / SUB

multiplicativeOperator <-
    MULT
    / DIV
    / MOD

asOperator <-
    AS_SAFE
    / AS

prefixUnaryOperator <-
    INCR
    / DECR
    / SUB
    / ADD
    / excl

postfixUnaryOperator <-
    INCR
    / DECR
    / EXCL_NO_WS excl

excl <-
    EXCL_WS
    / EXCL_NO_WS

memberAccessOperator <-
    DOT
    / safeNav
    / COLONCOLON

safeNav <- QUEST_NO_WS DOT

# // SECTION: modifiers
modifiers <- (
    annotation
    / modifier
)+

parameterModifiers <- (
    annotation
    / parameterModifier
)+

modifier <- (
    classModifier
    / memberModifier
    / visibilityModifier
    / functionModifier
    / propertyModifier
    / inheritanceModifier
    / parameterModifier
    / platformModifier
) __*

typeModifiers <- typeModifier+

typeModifier <-
    annotation
    / SUSPEND __*

classModifier <-
    ENUM
    / SEALED
    / ANNOTATION
    / DATA
    / INNER

memberModifier <-
    OVERRIDE
    / LATEINIT

visibilityModifier <-
    PUBLIC
    / PRIVATE
    / INTERNAL
    / PROTECTED

varianceModifier <-
    IN
    / OUT

typeParameterModifiers <- typeParameterModifier+

typeParameterModifier <-
    reificationModifier __*
    / varianceModifier __*
    / annotation

functionModifier <-
    TAILREC
    / OPERATOR
    / INFIX
    / INLINE
    / EXTERNAL
    / SUSPEND

propertyModifier <- CONST

inheritanceModifier <-
    ABSTRACT
    / FINAL
    / OPEN

parameterModifier <-
    VARARG
    / NOINLINE
    / CROSSINLINE

reificationModifier <- REIFIED

platformModifier <-
    EXPECT
    / ACTUAL

# // SECTION: annotations
annotation <- (
    singleAnnotation
    / multiAnnotation
) __*

singleAnnotation <-
    annotationUseSiteTarget __* unescapedAnnotation
    / (
        AT_NO_WS
        / AT_PRE_WS
    ) unescapedAnnotation

multiAnnotation <-
    annotationUseSiteTarget __* LSQUARE unescapedAnnotation+ RSQUARE
    / (
        AT_NO_WS
        / AT_PRE_WS
    ) LSQUARE unescapedAnnotation+ RSQUARE

annotationUseSiteTarget <- (
    AT_NO_WS
    / AT_PRE_WS
) (
    FIELD
    / PROPERTY
    / GET
    / SET
    / RECEIVER
    / PARAM
    / SETPARAM
    / DELEGATE
) __* COLON

unescapedAnnotation <-
    constructorInvocation
    / userType

# // SECTION: identifiers
simpleIdentifier <-
    !(hardKeyword !(
            Letter
            / "_"
            / UnicodeDigit
        )) Identifier
    / ABSTRACT
    / ANNOTATION
    / BY
    / CATCH
    / COMPANION
    / CONSTRUCTOR
    / CROSSINLINE
    / DATA
    / DYNAMIC
    / ENUM
    / EXTERNAL
    / FINAL
    / FINALLY
    / GET
    / IMPORT
    / INFIX
    / INIT
    / INLINE
    / INNER
    / INTERNAL
    / LATEINIT
    / NOINLINE
    / OPEN
    / OPERATOR
    / OUT
    / OVERRIDE
    / PRIVATE
    / PROTECTED
    / PUBLIC
    / REIFIED
    / SEALED
    / TAILREC
    / SET
    / VARARG
    / WHERE
    / FIELD
    / PROPERTY
    / RECEIVER
    / PARAM
    / SETPARAM
    / DELEGATE
    / FILE
    / EXPECT
    / ACTUAL
    / CONST
    / SUSPEND

identifier <- simpleIdentifier (__* DOT simpleIdentifier)*

hardKeyword <-
    AS
    / BREAK
    / CLASS
    / CONTINUE
    / DO
    / ELSE
    / FOR
    / FUN
    / IF
    / IN
    / INTERFACE
    / IS
    / NullLiteral
    / OBJECT
    / PACKAGE
    / RETURN
    / SUPER
    / THIS
    / THROW
    / TRY
    / TYPE_ALIAS
    / TYPEOF
    / VAL
    / VAR
    / WHEN
    / WHILE
    / BooleanLiteral

### Converted from peg/kotlin/KotlinLexer.g4
#
# // SECTION: lexicalGeneral
ShebangLine <- "#!" [^\r\n]*

DelimitedComment <- "/*" (
    DelimitedComment
    / !"*/" .
)* "*/"

LineComment <- "//" [^\r\n]*

#WS <- [\u0020\u0009\u000C]
#NL <- '\n' / '\r' '\n'?
Hidden <-
    DelimitedComment
    / LineComment
    / WS

# // SECTION: separatorsAndOperations
#RESERVED <- '...'
DOT <- "."

COMMA <- ","

LPAREN <- "("

RPAREN <- ")"

LSQUARE <- "["

RSQUARE <- "]"

LCURL <- "{"

# /*
# * When using another programming language (not Java) to generate a parser,
# * please replace this code with the corresponding code of a programming language you are using.
# */
RCURL <- "}"

MULT <- "*"

MOD <- "%"

DIV <- "/"

ADD <- "+"

SUB <- "-"

INCR <- "++"

DECR <- "--"

CONJ <- "&&"

DISJ <- "||"

EXCL_WS <- "!" Hidden

EXCL_NO_WS <- "!"

COLON <- ":"

SEMICOLON <- ";"

ASSIGNMENT <- "=" !"="

ADD_ASSIGNMENT <- "+="

SUB_ASSIGNMENT <- "-="

MULT_ASSIGNMENT <- "*="

DIV_ASSIGNMENT <- "/="

MOD_ASSIGNMENT <- "%="

ARROW <- "->"

#DOUBLE_ARROW <- '=>'
RANGE <- ".."

RANGE_UNTIL <- "..<"

COLONCOLON <- "::"

#DOUBLE_SEMICOLON <- ';;'
#HASH <- '#'
AT_NO_WS <- "@"

AT_POST_WS <- "@" (
    Hidden
    / NL
)

AT_PRE_WS <- (
    Hidden
    / NL
) "@"

#AT_BOTH_WS <- (Hidden / NL) '@' (Hidden / NL)
QUEST_WS <- "?" Hidden

QUEST_NO_WS <- "?"

LANGLE <- "<"

RANGLE <- ">"

LE <- "<="

GE <- ">="

EXCL_EQ <- "!="

EXCL_EQEQ <- "!=="

AS_SAFE <- "as?"

EQEQ <- "=="

EQEQEQ <- "==="

#SINGLE_QUOTE <- '\''
#
# // SECTION: keywords
RETURN_AT <- "return@" Identifier

CONTINUE_AT <- "continue@" Identifier

BREAK_AT <- "break@" Identifier

THIS_AT <- "this@" Identifier

SUPER_AT <- "super@" Identifier

FILE <- "file" !(
    Letter
    / UnicodeDigit
)

FIELD <- "field" !(
    Letter
    / UnicodeDigit
)

PROPERTY <- "property" !(
    Letter
    / UnicodeDigit
)

GET <- "get" !(
    Letter
    / UnicodeDigit
)

SET <- "set" !(
    Letter
    / UnicodeDigit
)

RECEIVER <- "receiver" !(
    Letter
    / UnicodeDigit
)

PARAM <- "param" !(
    Letter
    / UnicodeDigit
)

SETPARAM <- "setparam" !(
    Letter
    / UnicodeDigit
)

DELEGATE <- "delegate" !(
    Letter
    / UnicodeDigit
)

PACKAGE <- "package" !(
    Letter
    / UnicodeDigit
)

IMPORT <- "import" !(
    Letter
    / UnicodeDigit
)

CLASS <- "class" !(
    Letter
    / UnicodeDigit
)

INTERFACE <- "interface" !(
    Letter
    / UnicodeDigit
)

FUN <- "fun" !(
    Letter
    / UnicodeDigit
)

OBJECT <- "object" !(
    Letter
    / UnicodeDigit
)

VAL <- "val" !(
    Letter
    / UnicodeDigit
)

VAR <- "var" !(
    Letter
    / UnicodeDigit
)

TYPE_ALIAS <- "typealias" !(
    Letter
    / UnicodeDigit
)

CONSTRUCTOR <- "constructor" !(
    Letter
    / UnicodeDigit
)

BY <- "by" !(
    Letter
    / UnicodeDigit
)

COMPANION <- "companion" !(
    Letter
    / UnicodeDigit
)

INIT <- "init" !(
    Letter
    / UnicodeDigit
)

THIS <- "this" !(
    Letter
    / UnicodeDigit
)

SUPER <- "super" !(
    Letter
    / UnicodeDigit
)

TYPEOF <- "typeof" !(
    Letter
    / UnicodeDigit
)

WHERE <- "where" !(
    Letter
    / UnicodeDigit
)

IF <- "if" !(
    Letter
    / UnicodeDigit
)

ELSE <- "else" !(
    Letter
    / UnicodeDigit
)

WHEN <- "when" !(
    Letter
    / UnicodeDigit
)

TRY <- "try" !(
    Letter
    / UnicodeDigit
)

CATCH <- "catch" !(
    Letter
    / UnicodeDigit
)

FINALLY <- "finally" !(
    Letter
    / UnicodeDigit
)

FOR <- "for" !(
    Letter
    / UnicodeDigit
)

DO <- "do" !(
    Letter
    / UnicodeDigit
)

WHILE <- "while" !(
    Letter
    / UnicodeDigit
)

THROW <- "throw" !(
    Letter
    / UnicodeDigit
)

RETURN <- "return" !(
    Letter
    / UnicodeDigit
)

CONTINUE <- "continue" !(
    Letter
    / UnicodeDigit
)

BREAK <- "break" !(
    Letter
    / UnicodeDigit
)

AS <- "as" !(
    Letter
    / UnicodeDigit
)

IS <- "is" !(
    Letter
    / UnicodeDigit
)

IN <- "in" !(
    Letter
    / UnicodeDigit
)

NOT_IS <- "!is" !(
    Letter
    / UnicodeDigit
)

NOT_IN <- "!in" !(
    Letter
    / UnicodeDigit
)

OUT <- "out" !(
    Letter
    / UnicodeDigit
)

DYNAMIC <- "dynamic" !(
    Letter
    / UnicodeDigit
)

# // SECTION: lexicalModifiers
PUBLIC <- "public" !(
    Letter
    / UnicodeDigit
)

PRIVATE <- "private" !(
    Letter
    / UnicodeDigit
)

PROTECTED <- "protected" !(
    Letter
    / UnicodeDigit
)

INTERNAL <- "internal" !(
    Letter
    / UnicodeDigit
)

ENUM <- "enum" !(
    Letter
    / UnicodeDigit
)

SEALED <- "sealed" !(
    Letter
    / UnicodeDigit
)

ANNOTATION <- "annotation" !(
    Letter
    / UnicodeDigit
)

DATA <- "data" !(
    Letter
    / UnicodeDigit
)

INNER <- "inner" !(
    Letter
    / UnicodeDigit
)

TAILREC <- "tailrec" !(
    Letter
    / UnicodeDigit
)

OPERATOR <- "operator" !(
    Letter
    / UnicodeDigit
)

INLINE <- "inline" !(
    Letter
    / UnicodeDigit
)

INFIX <- "infix" !(
    Letter
    / UnicodeDigit
)

EXTERNAL <- "external" !(
    Letter
    / UnicodeDigit
)

SUSPEND <- "suspend" !(
    Letter
    / UnicodeDigit
)

OVERRIDE <- "override" !(
    Letter
    / UnicodeDigit
)

ABSTRACT <- "abstract" !(
    Letter
    / UnicodeDigit
)

FINAL <- "final" !(
    Letter
    / UnicodeDigit
)

OPEN <- "open" !(
    Letter
    / UnicodeDigit
)

CONST <- "const" !(
    Letter
    / UnicodeDigit
)

LATEINIT <- "lateinit" !(
    Letter
    / UnicodeDigit
)

VARARG <- "vararg" !(
    Letter
    / UnicodeDigit
)

NOINLINE <- "noinline" !(
    Letter
    / UnicodeDigit
)

CROSSINLINE <- "crossinline" !(
    Letter
    / UnicodeDigit
)

REIFIED <- "reified" !(
    Letter
    / UnicodeDigit
)

EXPECT <- "expect" !(
    Letter
    / UnicodeDigit
)

ACTUAL <- "actual" !(
    Letter
    / UnicodeDigit
)

# // SECTION: literals
DecDigit <- [0-9]

DecDigitNoZero <- [1-9]

DecDigitOrSeparator <-
    DecDigit
    / "_"

DecDigits <-
    DecDigit DecDigitOrSeparator*
    / DecDigit

DoubleExponent <- [eE] [-+]? DecDigits

RealLiteral <-
    FloatLiteral
    / DoubleLiteral

FloatLiteral <-
    DoubleLiteral [fF]
    / DecDigits [fF]

DoubleLiteral <-
    DecDigits? "." DecDigits DoubleExponent?
    / DecDigits DoubleExponent

IntegerLiteral <-
    DecDigitNoZero DecDigitOrSeparator*
    / DecDigit

#IntegerLiteral <- DecDigitNoZero DecDigitOrSeparator* DecDigit / DecDigit
HexDigit <- [0-9a-fA-F]

HexDigitOrSeparator <-
    HexDigit
    / "_"

HexLiteral <-
    "0" [xX] HexDigit HexDigitOrSeparator*
    / "0" [xX] HexDigit

BinDigit <- [01]

BinDigitOrSeparator <-
    BinDigit
    / "_"

BinLiteral <-
    "0" [bB] BinDigit BinDigitOrSeparator*
    / "0" [bB] BinDigit

UnsignedLiteral <- (
    HexLiteral
    / BinLiteral
    / IntegerLiteral
) [uU] [lL]?

LongLiteral <- (
    HexLiteral
    / BinLiteral
    / IntegerLiteral
) [lL]

BooleanLiteral <-
    "true"
    / "false"

NullLiteral <- "null"

CharacterLiteral <- "'" (
    EscapeSeq
    / [^\n\r'\\]
) "'"

# // SECTION: lexicalIdentifiers
#UnicodeDigit <- UNICODE_CLASS_ND
Identifier <-
    "`" [^`\r\n]+ "`"
    / (
        Letter
        / "_"
    ) (
        Letter
        / "_"
        / UnicodeDigit
    )*

IdentifierOrSoftKey <-
    Identifier
    / ABSTRACT
    / ANNOTATION
    / BY
    / CATCH
    / COMPANION
    / CONSTRUCTOR
    / CROSSINLINE
    / DATA
    / DYNAMIC
    / ENUM
    / EXTERNAL
    / FINAL
    / FINALLY
    / IMPORT
    / INFIX
    / INIT
    / INLINE
    / INNER
    / INTERNAL
    / LATEINIT
    / NOINLINE
    / OPEN
    / OPERATOR
    / OUT
    / OVERRIDE
    / PRIVATE
    / PROTECTED
    / PUBLIC
    / REIFIED
    / SEALED
    / TAILREC
    / VARARG
    / WHERE
    / GET
    / SET
    / FIELD
    / PROPERTY
    / RECEIVER
    / PARAM
    / SETPARAM
    / DELEGATE
    / FILE
    / EXPECT
    / ACTUAL
    / CONST
    / SUSPEND

FieldIdentifier <- "$" IdentifierOrSoftKey

UniCharacterLiteral <- "\\" "u" HexDigit HexDigit HexDigit HexDigit

EscapedIdentifier <- "\\" (
    "t"
    / "b"
    / "r"
    / "n"
    / "'"
    / "\""
    / "\\"
    / "$"
)

EscapeSeq <-
    UniCharacterLiteral
    / EscapedIdentifier

# // SECTION: characters
Letter <- [A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400\u4db5\u4e00\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]

UnicodeDigit <- [0-9\u0660-\u0669\u06f0-\u06f9\u07c0-\u07c9\u0966-\u096f\u09e6-\u09ef\u0a66-\u0a6f\u0ae6-\u0aef\u0b66-\u0b6f\u0be6-\u0bef\u0c66-\u0c6f\u0ce6-\u0cef\u0d66-\u0d6f\u0e50-\u0e59\u0ed0-\u0ed9\u0f20-\u0f29\u1040-\u1049\u1090-\u1099\u17e0-\u17e9\u1810-\u1819\u1946-\u194f\u19d0-\u19d9\u1a80-\u1a89\u1a90-\u1a99\u1b50-\u1b59\u1bb0-\u1bb9\u1c40-\u1c49\u1c50-\u1c59\ua620-\ua629\ua8d0-\ua8d9\ua900-\ua909\ua9d0-\ua9d9\uaa50-\uaa59\uabf0-\uabf9\uff10-\uff19]

# // SECTION: strings
QUOTE_OPEN <- "\"" !"\"\""

TRIPLE_QUOTE_OPEN <- "\"\"\""

QUOTE_CLOSE <- "\""

LineStrRef <- FieldIdentifier

#LineStrText <- [^\\"$]+ / '$'
LineStrText <-
    [^\\"$]+
    / "$"

LineStrEscapedChar <-
    EscapedIdentifier
    / UniCharacterLiteral

LineStrExprStart <- "${"

TRIPLE_QUOTE_CLOSE <-
    "\"\"\"\"\""
    / "\"\"\"\""
    / "\"\"\""

MultiLineStringQuote <-
    "\"\"" !"\""
    / "\"" !"\"\""

MultiLineStrRef <- FieldIdentifier

#MultiLineStrText <- !('"' / '$')+ / '$'
MultiLineStrText <-
    [^"$]+
    / "$"

MultiLineStrExprStart <- "${"

_ <- (
    WS
    / DelimitedComment
    / LineComment
)+

__ <- (
    [ \t\f\r\n]
    / DelimitedComment
    / LineComment
)+

WS <- [ \t\f]

NL <- _* (
    "\n"
    / "\r" "\n"?
) _*

EOF <- !.

%%
#include "kotlin_post.h"
